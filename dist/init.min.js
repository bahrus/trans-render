export function init(template,ctx,target){ctx.init=init;const transformScriptSelector="script[transform]",clonedTemplate=template.content.cloneNode(!0);if(ctx.template=clonedTemplate,!ctx.transform){const scriptTransform=clonedTemplate.querySelector(transformScriptSelector);null!==scriptTransform&&(ctx.transform=eval(scriptTransform.innerHTML),scriptTransform.remove())}if(ctx.transform){const t=clonedTemplate.firstElementChild;null!==t&&(ctx.leaf=t,process(ctx,0,0))}return target.appendChild(ctx.template),ctx}export function process(t,e,r){const n=t.leaf;if(void 0===n.matches)return;const c=t.transform;t.matchFirstChild=!1,t.matchNextSib=!1;for(const o in c)if(n.matches(o)){(0,c[o])({target:n,ctx:t,idx:e,level:r})}const o=t.matchNextSib,s=t.matchFirstChild;if(o){let c=t.transform;"object"==typeof o&&(t.transform=o);const s=n.nextElementSibling;null!==s&&(t.leaf=s,process(t,e+1,r)),t.transform=c}if(s){let e=t.transform;"object"==typeof s&&(t.transform=s);const c=n.firstElementChild;null!==c&&(t.leaf=c,process(t,0,r+1)),t.transform=e}t.matchFirstChild=s,t.matchNextSib=o}