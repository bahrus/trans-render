export class CE{args;constructor(t){this.args=t,void 0!==t&&this.def(t)}defaultProp={type:"Object",dry:!0,parse:!0};addProps(t,e,s){const{doActions:o,pq:i,getProps:r,doPA:n}=this,c=this,a=t.prototype,p=s.config;for(const t in e){const s=e[t],f="_"+t;t in a||Object.defineProperty(a,t,{get(){return this[f]},set(e){const a=this[f];if(s.dry&&this[f]===e)return;const d=p.propChangeMethod,h=void 0!==d?this[d]:void 0,u={key:t,ov:a,nv:e,prop:s,pcm:h};if(!n(c,this,u,"v"))return;if(this[f]=e,this.isInQuietMode&&n(c,this,u,"+qm"),this.QR)return this.QR(t,this),void n(c,this,u,"+qr");if(!n(c,this,u,"-a"))return;const l=this.mergedActions;if(void 0!==l){const s={};for(const e in l){const o=l[e];r(c,o).has(t)&&(i(c,o,this)&&(s[e]=o))}o(c,s,this,{key:t,ov:a,nv:e})}n(c,this,u,"+a")},enumerable:!0,configurable:!0})}}doPA(t,e,s,o){return void 0===s.pcm||!1!==s.pcm(e,s,o)}createPropInfos(t){const{defaultProp:e,setType:s}=this,o={},i={...t.complexPropDefaults,...t.config.propDefaults};for(const t in i){const r={...e};s(r,i[t]),o[t]=r}const r=t.config.propInfo;if(void 0!==r)for(const t in r){if(void 0===o[t]){const s={...e};o[t]=s}const s=o[t];Object.assign(s,r[t])}const n=t.config.actions;if(void 0!==n)for(const t in n){const s=n[t],i=this.getProps(this,s);for(const t of i)if(void 0===o[t]){const s={...e};o[t]=s}}return o}classDef;def(t){this.args=t;const{getAttrNames:e,doActions:s,fine:o,pq:i,toCamel:r,toLisp:n,propUp:c,getProps:a}=this,p=this,{config:f}=t,{tagName:d,style:h,actions:u}=f,l=this.createPropInfos(t);let g=t.superclass||HTMLElement;const b=g.prototype,v=t.mixins;if(void 0!==v)for(const t of v)"function"==typeof t?g=t(g):Object.assign(b,t);class m extends g{static is=d;static observedAttributes=e(l,n,g);static reactiveProps=l;static ceDef=t;constructor(){super(),this.attachQR()}#mergedActions;get mergedActions(){return void 0===this.#mergedActions&&(this.#mergedActions=super.mergedActions||{},Object.assign(this.#mergedActions,f.actions)),this.#mergedActions}attributeChangedCallback(t,e,s){super.attributeChangedCallback&&super.attributeChangedCallback(t,e,s);let o=r(t);const i=l[o];if((this.inAbsorbMode||this.inReflectMode)&&(o="_"+o),void 0!==i){if(i.dry&&e===s)return;const t=this;switch(i.type){case"String":t[o]=s;break;case"Object":if(i.parse){let e=s.trim();if(null!==e&&["[","{"].includes(e[0]))try{e=JSON.parse(e)}catch(t){}t[o]=e}break;case"Number":t[o]=Number(s);break;case"Boolean":t[o]=null!==s}}}connectedCallback(t){Object.assign(this.style,h);const e=t||this.constructor.ceDef,s={...e.config.propDefaults,...e.complexPropDefaults};c(this,Object.keys(l),s),super.connectedCallback&&super.connectedCallback(super.constructor.ceDef),this.detachQR()}attachQR(){this.QR=QR}detachQR(){delete this.QR;const t=this.propChangeQueue,e=this.mergedActions,o={};if(void 0!==t&&void 0!==e)for(const s in e){const r=e[s],n=a(p,r);let c=!1;for(const e of n)if(t.has(e)&&(c=i(p,r,this),c))break;c&&(o[s]=r)}s(p,o,this,t),delete this.propChangeQueue}setValsQuietly(t){for(const e in t)this["_"+e]=t[e]}get inAbsorbMode(){return this.hasAttribute("defer-hydration")}}return this.addProps(m,l,t),o(d,m),this.classDef=m,this.classDef}async doActions(t,e,s,o){for(const o in e){const i=e[o];i.debug;const r=i.async?await s[o](s):s[o](s);void 0!==r&&t.postHoc(t,i,s,r)}}fine(t,e){customElements.define(t,e)}getAttrNames(t,e,s){const o=s.observedAttributes||[];for(const s in t){t[s].parse&&o.push(e(s))}return o}getProps(t,e){return new Set([...e.ifAllOf||[],...e.ifKeyIn||[]])}postHoc(t,e,s,o){Object.assign(s,o);const i=e.setFree;if(void 0!==i)for(const t of i)s[t]=void 0}pq(t,e,s,o={op:"and"}){const{ifAllOf:i}=e,{pqs:r}=t;return!(void 0!==i&&!r(t,i,s,o))}pqsv(t,e,s,o){return!!e[s]}pqs(t,e,s,o){for(const i of e)if(!t.pqsv(t,s,i,o))return!1;return!0}propUp(t,e,s){for(const o of e){let e=t[o];void 0===e&&void 0!==s&&(e=s[o]),t.hasOwnProperty(o)&&delete t[o];try{t[o]=e}catch{}}}setType(t,e){if(void 0!==e){let s=typeof e;s=s[0].toUpperCase()+s.substr(1),t.type=s}}toLisp(t){return t.split(ctlRe).join("-").toLowerCase()}toCamel(t){return t.replace(stcRe,(function(t){return t[1].toUpperCase()}))}}const QR=(t,e)=>{void 0===e.propChangeQueue&&(e.propChangeQueue=new Set),e.propChangeQueue.add(t)},ctlRe=/(?=[A-Z])/,stcRe=/(\-\w)/g;