export function init(template,ctx,target){ctx.init=init;const transformScriptSelector="script[transform]",clonedTemplate=template.content.cloneNode(!0);if(ctx.template=clonedTemplate,!ctx.transform){const scriptTransform=clonedTemplate.querySelector(transformScriptSelector);null!==scriptTransform&&(ctx.transform=eval(scriptTransform.innerHTML),scriptTransform.remove())}if(ctx.transform){const t=clonedTemplate.firstElementChild;null!==t&&(ctx.leaf=t,process(ctx))}return target.appendChild(ctx.template),ctx}export function process(t){const e=t.leaf;if(void 0===e.matches)return;const r=t.transform;t.matchFirstChild=!1,t.matchNextSib=!1;for(const n in r)if(e.matches(n)){(0,r[n])({target:e,ctx:t})}const n=t.matchNextSib,c=t.matchFirstChild;if(n){let r=t.transform;"object"==typeof n&&(t.transform=n);const c=e.nextElementSibling;null!==c&&(t.leaf=c,process(t)),t.transform=r}if(c){let r=t.transform;"object"==typeof c&&(t.transform=c);const n=e.firstElementChild;null!==n&&(t.leaf=n,process(t)),t.transform=r}t.matchFirstChild=c,t.matchNextSib=n}