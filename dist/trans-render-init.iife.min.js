export function init(template,ctx,target){ctx.init=init;const transformScriptSelector="script[transform]",clonedTemplate=template.content.cloneNode(!0);if(ctx.template=clonedTemplate,!ctx.transform){const scriptTransform=clonedTemplate.querySelector(transformScriptSelector);null!==scriptTransform&&(ctx.transform=eval(scriptTransform.innerHTML),scriptTransform.remove())}if(ctx.transform){const t=clonedTemplate.firstElementChild;if(null!==t){const e={leaf:t};Object.assign(ctx,e),process(ctx)}}return target.appendChild(ctx.template),ctx}function process(t){const e=t.leaf;if(void 0===e.matches)return;const r=t.transform;t.matchFirstChild=!1,t.matchNextSib=!1;for(const c in r)if(e.matches(c)){(0,r[c])({target:e,ctx:t})}const c=t.matchNextSib,n=t.matchFirstChild;if(c){const r=e.nextElementSibling;null!==r&&(t.leaf=r,process(t))}if(n){const r=e.firstElementChild;null!==r&&(t.leaf=r,process(t))}t.matchFirstChild=n,t.matchNextSib=c}